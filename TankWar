import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.ArrayList;

public class TankWar extends Frame {
	public static final int GAME_WIDTH = 800;
	public static final int GAME_HEIGHT = 600;

	Tank myTank = new Tank(50, 50, true, Tank.Direction.STOP, this);

	Missile m;
	Image offScreenImage = null;

	List<Missile> missiles = new ArrayList<Missile>();
	List<Explosion> explos = new ArrayList<Explosion>();
	List<Tank> tanks = new ArrayList<Tank>();

	public static void main(String[] args) {
		TankWar tw = new TankWar();
		tw.launchFrame();
	}

	public void launchFrame() {

		for (int i = 0; i < 10; i++) {
			tanks.add(new Tank(60 + 40 * (i + 1), 60 + 40 * (i + 1), false, Tank.Direction.R, this));
		}
		setLayout(null);
		setBounds(300, 100, GAME_WIDTH, GAME_HEIGHT);
		setResizable(false);
		new Thread(new PaintThread()).start();
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		addKeyListener(new KeyMonitor());
		setVisible(true);
	}

	public void paint(Graphics g) {
		g.drawString("Missiles Counts: " + missiles.size(), 10, 50);
		g.drawString("Explosion Counts: " + explos.size(), 10, 70);
		g.drawString("Tanks Counts: " + tanks.size(), 10, 90);
		myTank.generateTank(g);

		for (int i = 0; i < tanks.size(); i++) {
			tanks.get(i).generateTank(g);
		}

		for (int i = 0; i < missiles.size(); i++) {
			m = missiles.get(i);
			m.generateMissle(g);
			m.hitTanks(tanks);
		}

		for (int i = 0; i < explos.size(); i++) {
			Explosion e = explos.get(i);
			e.generateExplo(g);
		}
	}

	// DoubleBuffered
	public void update(Graphics g) {
		if (offScreenImage == null) {
			offScreenImage = this.createImage(GAME_WIDTH, GAME_HEIGHT);
		}
		Graphics gOffScreenImage = offScreenImage.getGraphics();
		Color c = gOffScreenImage.getColor();
		gOffScreenImage.setColor(Color.white);
		gOffScreenImage.fillRect(0, 0, GAME_WIDTH, GAME_HEIGHT);
		gOffScreenImage.setColor(c);
		paint(gOffScreenImage);
		g.drawImage(offScreenImage, 0, 0, null);

	}

	private class PaintThread implements Runnable {

		public void run() {
			try {
				while (true) {
					repaint();
					Thread.sleep(50);
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	private class KeyMonitor extends KeyAdapter {

		public void keyPressed(KeyEvent e) {
			myTank.keyPressed(e);
		}

		public void keyReleased(KeyEvent e) {
			myTank.keyReleased(e);
		}
	}

}
