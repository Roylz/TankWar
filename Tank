import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class Tank {

	private static final int XSPEED = 5;		// move speed of tank at X-axis
	private static final int YSPEED = 5;		// move speed of tank at Y-axis
	public static final int WIDTH = 30;		// tank width
	public static final int HEIGHT = 30;		// tank height

	private int x, y;				// tank's postion coordinate(x, y)
	private int last_X, last_Y;			// remember the last coordinate of tank
	private boolean bU = false, bR = false, bD = false, bL = false;			// direction detemination
	private boolean bGood;				// the tank you control will have a true value; the enemy will have false
	private boolean isAlive = true;			// detemine whether tank is alive
	TankWar tw;
	Missile m;
	Wall w;

	enum Direction {				// enum possible direcitons that tank can move
		U, UR, R, DR, D, DL, L, UL, STOP
	};

	Direction dir = Direction.STOP;			// default direction of tank, stop at default position
	Direction cannonDir = Direction.R;		// default the direction of cannon
	private static Random r = new Random();

	private int moveStep = r.nextInt(12) + 3;	// get a random number to make tank moving

	public Tank(int x, int y, boolean bGood) {	
		this.x = x;
		this.y = y;
		this.bGood = bGood;
		this.last_X = x;
		this.last_Y = y;
	}

	public Tank(int x, int y, boolean bGood, Direction dir, TankWar tw) {		// overload constructor
		this(x, y, bGood);
		this.dir = dir;
		this.tw = tw;
	}

	public void generateTank(Graphics g) {			// draw tanks
		if (isAlive == true) {
			Color c = g.getColor();
			if (bGood)
				g.setColor(Color.BLUE);
			else
				g.setColor(Color.RED);
			g.fillOval(x, y, WIDTH, HEIGHT);
			g.setColor(c);
			switch (cannonDir) {			// draw cannons according to the direction that tank moves
			case U:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x + WIDTH / 2, y);
				break;
			case UR:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x + WIDTH, y);
				break;
			case R:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x + WIDTH, y + HEIGHT
						/ 2);
				break;
			case DR:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x + WIDTH, y + HEIGHT);
				break;
			case D:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x + WIDTH / 2, y
						+ HEIGHT);
				break;
			case DL:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x, y + HEIGHT);
				break;
			case L:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x, y + HEIGHT / 2);
				break;
			case UL:
				g.drawLine(x + WIDTH / 2, y + HEIGHT / 2, x, y);
				break;
			}

		} else {
			if (bGood == false) {			// if tank is dead, remove it from array
				tw.tanks.remove(this);
			}
		}
		tankMove();		// tank starts to move

	}

	public void keyPressed(KeyEvent e) {		// key listener to control your tank to move
		int keyInput = e.getKeyCode();
		switch (keyInput) {
		case KeyEvent.VK_UP:
			bU = true;
			break;
		case KeyEvent.VK_RIGHT:
			bR = true;
			break;
		case KeyEvent.VK_DOWN:
			bD = true;
			break;
		case KeyEvent.VK_LEFT:
			bL = true;
			break;
		case KeyEvent.VK_A:
			fire();
			break;
		case KeyEvent.VK_S:
			superFire();
			break;
		}
		locateDir();
	}

	private Missile fire() {					// fire function, return the missile to detemine
		if(!isAlive) return null;				// whethet it hits a tank or not
		int x = this.x + Tank.WIDTH / 2 - Missile.WIDTH / 2;
		int y = this.y + Tank.HEIGHT / 2 - Missile.HEIGHT / 2;
		if (bGood)
			m = new Missile(x, y, cannonDir, true, this.tw, this.w);
		else
			m = new Missile(x, y, cannonDir, false, this.tw, this.w);
		tw.missiles.add(m);
		return m;
	}
	
	private Missile fire(Direction dir) {				// overload fire() to make sure missile is fired
		if(!isAlive) return null;				// from cannons
		int x = this.x + Tank.WIDTH / 2 - Missile.WIDTH / 2;
		int y = this.y + Tank.HEIGHT / 2 - Missile.HEIGHT / 2;
		if (bGood)
			m = new Missile(x, y, dir, true, this.tw, this.w);
		else
			m = new Missile(x, y, dir, false, this.tw, this.w);
		tw.missiles.add(m);
		return m;
	}
	
	private void superFire(){					// tank can fire eight missiles toward all directions
		Direction dirs[] = Direction.values();			// at the same time
		for(int i = 0; i < dirs.length - 1; i++){
			fire(dirs[i]);
		}
	}

	public void keyReleased(KeyEvent e) {				// release the key then tank will stay at the last 
		int keyInput = e.getKeyCode();				// position
		switch (keyInput) {
		case KeyEvent.VK_UP:
			bU = false;
			break;
		case KeyEvent.VK_RIGHT:
			bR = false;
			break;
		case KeyEvent.VK_DOWN:
			bD = false;
			break;
		case KeyEvent.VK_LEFT:
			bL = false;
			break;
		}
		locateDir();
	}

	void tankMove() {						// control your tank to move
		last_X = x;
		last_Y = y;
		
		switch (dir) {
		case U:
			y -= YSPEED;
			break;
		case UR:
			y -= YSPEED;
			x += XSPEED;
			break;
		case R:
			x += XSPEED;
			break;
		case DR:
			y += YSPEED;
			x += XSPEED;
			break;
		case D:
			y += YSPEED;
			break;
		case DL:
			y += YSPEED;
			x -= XSPEED;
			break;
		case L:
			x -= XSPEED;
			break;
		case UL:
			y -= YSPEED;
			x -= XSPEED;
			break;
		case STOP:
			break;
		}

		if (this.dir != Direction.STOP)				// make sure the cannon direciton will
			this.cannonDir = this.dir;			// move along with the direction of tanks
		
		if (x < 0)						// make sure tanks donot go across the border
			x = 0;						// of game interface
		else if (y < 30)
			y = 30;
		else if (x + Tank.WIDTH > TankWar.GAME_WIDTH)
			x = TankWar.GAME_WIDTH - Tank.WIDTH;
		else if (y + Tank.HEIGHT > TankWar.GAME_HEIGHT)
			y = TankWar.GAME_HEIGHT - Tank.HEIGHT;

									
		if (!bGood) {						// this controls how enemy moves
			Direction[] enemyDirs = Direction.values();
			if (moveStep == 0) {
				moveStep = r.nextInt(12) + 3;
				int rn = r.nextInt(enemyDirs.length);
				dir = enemyDirs[rn];
				if(r.nextInt(40) > 25) fire();
			}

			moveStep--;
		}
	}

	void tankStay(){						// when you don't move tank, tank will stay
		x = last_X;						// ata last coordinate(x, y)
		y = last_Y;
	}
	
	public void locateDir() {					// detemine the directions from the key you 
		if (bU && !bR && !bD && !bL)				// press
			dir = Direction.U;
		else if (!bU && bR && !bD && !bL)
			dir = Direction.R;
		else if (!bU && !bR && bD && !bL)
			dir = Direction.D;
		else if (!bU && !bR && !bD && bL)
			dir = Direction.L;
		else if (bU && bR && !bD && !bL)
			dir = Direction.UR;
		else if (!bU && bR && bD && !bL)
			dir = Direction.DR;
		else if (!bU && !bR && bD && bL)
			dir = Direction.DL;
		else if (bU && !bR && !bD && bL)
			dir = Direction.UL;
		else if (!bU && !bR && !bD && !bL)
			dir = Direction.STOP;
	}

	public Rectangle getTankRect() {				// get the rectangle of tanks to detemind colliding
		return new Rectangle(x, y, WIDTH, HEIGHT);

	}

	public boolean isAlive() {					// detemine whether tanks is alive or not
		return isAlive;
	}

	public void setAlive(boolean isAlive) {				// to reset tank
		this.isAlive = isAlive;
	}

	public boolean isbGood() {					// to detemine your tank or enemy tanks
		return bGood;
	}
	
	public boolean collidesWithWall(Wall w){			// to detemine whethe tanks have collides with walls
		if(isAlive && getTankRect().intersects(w.getWallRect())){
			tankStay();
			return true;
		}
		return false;
	}
	
	public boolean collidesWithTanks(java.util.List<Tank> tanks){	// to detemine whethe tanks have collides with tanks
		for(int i = 0; i < tanks.size(); i++){
			Tank t = tanks.get(i);
			
			if(this != t){
		if(isAlive && t.isAlive() && getTankRect().intersects(t.getTankRect())){
			this.tankStay();
			t.tankStay();
			return true;
			}
		}
		}
		return false;
	}
	
}
